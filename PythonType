{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rias08/Internship-Python-Practice/blob/main/PythonType\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GTN5oPx2bKyU",
        "outputId": "c5ed32eb-7c83-40f7-fd60-257618bc9c36"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting colorama\n",
            "  Downloading colorama-0.4.6-py2.py3-none-any.whl.metadata (17 kB)\n",
            "Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n",
            "Installing collected packages: colorama\n",
            "Successfully installed colorama-0.4.6\n"
          ]
        }
      ],
      "source": [
        "!pip3 install colorama"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x89ShgyqPGb0",
        "outputId": "62fc3d88-438f-42c9-d1dc-2f04c9eace01"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Have a good day! :)\n",
            "\n",
            "Your highest accuracy this session was 88.86363636363637%. \n",
            "\n",
            "Your highest WPM this session was 56.4 WPM. \n",
            "\n",
            "Your highest overall rating this session was 53.59/100.00. \n",
            "\n"
          ]
        }
      ],
      "source": [
        "#Pythontype\n",
        "#Copyright Carter Wong & Ria Shroff 2024\n",
        "\n",
        "import random\n",
        "from random import randint\n",
        "import time\n",
        "from IPython.display import clear_output\n",
        "import string\n",
        "import requests\n",
        "from colorama import Fore, Back, Style\n",
        "\n",
        "#dictionary\n",
        "highest_scores = dict()\n",
        "highest_scores['accuracy'] = 0\n",
        "highest_scores['wpm'] = 0\n",
        "highest_scores['overall'] = 0\n",
        "\n",
        "word_url = 'https://www.mit.edu/~ecprice/wordlist.10000'\n",
        "r = requests.get(word_url, allow_redirects=True)\n",
        "\n",
        "def fetch_word():\n",
        "  return random.choice(r.text.split(\"\\n\"))\n",
        "\n",
        "#functions\n",
        "def screen_fixer():\n",
        "  clear_output()\n",
        "\n",
        "def try_again():\n",
        "  screen_fixer()\n",
        "  print('Try again!')\n",
        "  time.sleep(2)\n",
        "\n",
        "def make_dict(user_input):\n",
        "  user_dict = dict()\n",
        "\n",
        "  for c in user_input:\n",
        "    if c not in user_dict:\n",
        "      user_dict[c] = 0\n",
        "    user_dict[c] += 1\n",
        "  return user_dict\n",
        "\n",
        "def matcher(actual_dict, user_dict, matches):\n",
        "  for key in actual_dict:\n",
        "    if key in user_dict:\n",
        "      if user_dict[key] > actual_dict[key]:\n",
        "        matches += actual_dict[key]\n",
        "      elif user_dict[key] <= actual_dict[key]:\n",
        "        matches += user_dict[key]\n",
        "  return matches\n",
        "\n",
        "#intro\n",
        "screen_fixer()\n",
        "print('Welcome to Pythontype!')\n",
        "time.sleep(1)\n",
        "\n",
        "again = True\n",
        "\n",
        "while again:\n",
        "  #word count\n",
        "  screen_fixer()\n",
        "  while True:\n",
        "    word_number = int(input('How many words do you want to type? (25 max)\\n'))\n",
        "\n",
        "    if 0 <= word_number <= 25:\n",
        "      break\n",
        "    elif not int:\n",
        "      try_again()\n",
        "    else:\n",
        "      try_again()\n",
        "\n",
        "  screen_fixer()\n",
        "\n",
        "  time.sleep(1)\n",
        "\n",
        "  #start\n",
        "\n",
        "  screen_fixer()\n",
        "\n",
        "  while True:\n",
        "    starter = input('Type \\\"start\\\" to start:\\n')\n",
        "\n",
        "    if starter == 'start':\n",
        "      break\n",
        "\n",
        "    try_again()\n",
        "\n",
        "  screen_fixer()\n",
        "\n",
        "  for i in range(3,0,-1):\n",
        "    print(Back.BLACK + Fore.LIGHTCYAN_EX + f'{i}...')\n",
        "    time.sleep(1)\n",
        "\n",
        "  screen_fixer()\n",
        "\n",
        "  #display words\n",
        "  paragraph = ''\n",
        "  wpm = 0\n",
        "  accuracy = 0\n",
        "\n",
        "  for type_words in range (0,word_number-1):\n",
        "    paragraph += fetch_word()\n",
        "    paragraph += ' '\n",
        "  paragraph += fetch_word()\n",
        "\n",
        "  print(paragraph)\n",
        "\n",
        "  #time + user types\n",
        "  start = time.time()\n",
        "  user_input = input('\\n')\n",
        "  end = time.time()\n",
        "\n",
        "  seconds = round(end - start, 2)\n",
        "\n",
        "  screen_fixer()\n",
        "\n",
        "  #ACCURACY\n",
        "  #comparison of letter frequency (50%)\n",
        "  user_dict = make_dict(user_input)\n",
        "  actual_dict = make_dict(paragraph)\n",
        "\n",
        "  #see if they match or not\n",
        "  matches = 0\n",
        "\n",
        "  matches = matcher(actual_dict, user_dict, matches)\n",
        "\n",
        "  #word accuracy (50%)\n",
        "  split_input = user_input.split(' ')\n",
        "  split_paragraph = paragraph.split(' ')\n",
        "\n",
        "  split_user_dict = make_dict(split_input)\n",
        "  split_actual_dict = make_dict(split_paragraph)\n",
        "\n",
        "  #see if they match or not\n",
        "  word_matches = 0\n",
        "\n",
        "  word_matches = matcher(split_actual_dict, split_user_dict, word_matches)\n",
        "\n",
        "  accuracy = 100 * (1/2 * matches/len(paragraph) + 1/2 * word_matches/len(split_paragraph))\n",
        "\n",
        "  #WPM\n",
        "  WPM = round(matches / seconds * 60 / 4.7, 2)\n",
        "\n",
        "  #Overall score\n",
        "  Score = round(WPM/6 + accuracy / 2, 2)\n",
        "\n",
        "  #update high scores\n",
        "  if accuracy > highest_scores['accuracy']:\n",
        "    highest_scores['accuracy'] = accuracy\n",
        "\n",
        "  if WPM > highest_scores['wpm']:\n",
        "    highest_scores['wpm'] = WPM\n",
        "\n",
        "  if Score > highest_scores['overall']:\n",
        "    highest_scores['overall'] = Score\n",
        "\n",
        "  #print session scores\n",
        "  print(f'Your time was {seconds} seconds.')\n",
        "  print(f'Your accuracy was {accuracy}%. ')\n",
        "  print(f'Your WPM was {WPM} WPM. ')\n",
        "  print(f'Your overall rating is {Score}/100.00. \\n')\n",
        "\n",
        "  #print high scores of the session\n",
        "  print(f\"Your highest accuracy this session is {highest_scores['accuracy']}%. \")\n",
        "  print(f\"Your highest WPM this session is {highest_scores['wpm']} WPM. \")\n",
        "  print(f\"Your highest overall rating this session is {highest_scores['overall']}/100.00. \\n\")\n",
        "\n",
        "  play_again = input('Would you like to try again? (yes/no)\\n')\n",
        "\n",
        "  #session highlights\n",
        "  while True:\n",
        "    if play_again == 'no':\n",
        "      screen_fixer()\n",
        "      print('Have a good day! :)\\n')\n",
        "      time.sleep(1)\n",
        "      print(f\"Your highest accuracy this session was {highest_scores['accuracy']}%. \\n\")\n",
        "      time.sleep(1)\n",
        "      print(f\"Your highest WPM this session was {highest_scores['wpm']} WPM. \\n\")\n",
        "      time.sleep(1)\n",
        "      print(f\"Your highest overall rating this session was {highest_scores['overall']}/100.00. \\n\")\n",
        "      again = False\n",
        "      break\n",
        "    if play_again == 'yes':\n",
        "      break\n",
        "\n",
        "    try_again()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}